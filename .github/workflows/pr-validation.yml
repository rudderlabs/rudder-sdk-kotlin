name: PR Validation

on:
  pull_request:
    branches: [ "develop", "feat/*", "refactor/*", "release/*" ]
    types: [ "opened", "reopened", "synchronize" ]

jobs:
  # Combined PR validation - all checks run sequentially in a single job
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    steps:
      # Single checkout with full history for all checks
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for SonarCloud and merge validation

      # Single merge operation for all subsequent checks
      - name: Merge with target branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git fetch origin ${{ github.base_ref }}
          git merge origin/${{ github.base_ref }} --no-edit

      # Step 1: PR Title Check
      - name: Check PR Title
        uses: ./.github/actions/pr-title-check

      # Single JDK setup for all Java/Gradle-based checks
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 2: SonarCloud Analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarCloud Analysis
        uses: SonarSource/sonarqube-scan-action@2500896589ef8f7247069a56136f8dc177c27ccf
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Analysis Result
        run: |
          echo "âœ… SonarCloud analysis completed"
          echo "Check the SonarCloud dashboard for detailed results"

      # Step 3: Detekt Check
      - name: Run Detekt
        run: |
          chmod +x scripts/run-quality-checks.sh
          ./gradlew detekt

      - name: Upload Detekt reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: detekt-reports-${{ github.run_id }}
          path: |
            **/build/reports/detekt/

      # Step 4: Lint Check
      - name: Run Android Lint
        run: |
          chmod +x scripts/run-quality-checks.sh
          ./gradlew lint

      - name: Upload Lint reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports-${{ github.run_id }}
          path: |
            **/build/reports/lint-results*.html

      # Step 5: Test Check
      - name: Run Tests
        run: |
          chmod +x scripts/run-quality-checks.sh
          ./gradlew test

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ github.run_id }}
          path: |
            **/build/reports/tests/

      # Step 6: Build Check
      - name: Build Modules
        run: |
          chmod +x scripts/run-quality-checks.sh
          ./gradlew build

      # Slack notification
      - name: Notify Slack
        if: always()
        run: |
          chmod +x scripts/send-slack-notification.sh

          # Determine status
          if [ "${{ job.status }}" = "success" ]; then
            STATUS="passed"
          else
            STATUS="failed"
          fi

          # Set environment variables for the script
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export GITHUB_EVENT_NUMBER="${{ github.event.number }}"
          export GITHUB_EVENT_PR_TITLE="${{ github.event.pull_request.title }}"
          export GITHUB_HEAD_REF="${{ github.head_ref }}"
          export GITHUB_BASE_REF="${{ github.base_ref }}"
          export GITHUB_ACTOR="${{ github.actor }}"
          export GITHUB_EVENT_PR_HTML_URL="${{ github.event.pull_request.html_url }}"
          export GITHUB_RUN_ID="${{ github.run_id }}"
          export SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}"

          ./scripts/send-slack-notification.sh "pr" "$STATUS" "" ""
